name: Enhanced Testing Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Unit & Integration Tests
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_ROLE_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_TEST_URL }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        npm run db:reset:test
        npm run db:seed:test

    - name: Run unit tests
      run: npm run test

    - name: Run integration tests
      run: npm run test:integration

    - name: Run type check
      run: npm run typecheck

    - name: Run linting
      run: npm run lint

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps

    - name: Setup test database
      run: |
        npm run db:reset:test
        npm run db:seed:test

    - name: Build application
      run: npm run build

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results-${{ matrix.node-version }}
        path: test-results/

  # Database Migration Tests
  db-migration-test:
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: ${{ secrets.DATABASE_TEST_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_ROLE_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Test database reset
      run: npm run db:reset:test

    - name: Test migrations
      run: npm run db:migrate:test

    - name: Test seed data
      run: npm run db:seed:test

    - name: Verify database schema
      run: npm run db:verify:test

  # Deploy to Preview (Vercel)
  deploy-preview:
    needs: [test, e2e-tests, db-migration-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Deploy to Preview
      run: |
        vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        vercel build --token=${{ secrets.VERCEL_TOKEN }}
        vercel deploy --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt

    - name: Comment PR with Preview URL
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const url = fs.readFileSync('deployment-url.txt', 'utf8').trim();
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Preview deployed!**\n\n**Preview URL:** ${url}\n\n**Test the following:**\n- [ ] ダッシュボード表示\n- [ ] データベース接続\n- [ ] レスポンシブデザイン`
          });

  # Production Deploy (main branch only)
  deploy-production:
    needs: [test, e2e-tests, db-migration-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Deploy to Production
      run: |
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Run post-deployment tests
      run: npm run test:production

    - name: Notify deployment success
      run: |
        echo "🎉 Production deployment successful!"
        echo "🔗 URL: https://dev-elite-academy.vercel.app"