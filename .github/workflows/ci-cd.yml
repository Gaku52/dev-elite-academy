name: Dev Elite Academy CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Test Supabase connection
      run: |
        echo "Testing Supabase connection..."
        echo "SUPABASE_URL: $NEXT_PUBLIC_SUPABASE_URL"
        echo "ANON_KEY length: ${#NEXT_PUBLIC_SUPABASE_ANON_KEY}"
        node -e "
        const { createClient } = require('@supabase/supabase-js');
        console.log('URL:', process.env.NEXT_PUBLIC_SUPABASE_URL);
        console.log('Key starts with:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.substring(0, 10));
        const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
        supabase.from('categories').select('count').then(({data, error}) => {
          if (error) throw error;
          console.log('‚úÖ Supabase connection successful');
          console.log('üìä Categories found:', data?.length || 0);
        }).catch(err => {
          console.error('‚ùå Supabase connection failed:', err);
          process.exit(1);
        });
        "

    - name: Run linter
      run: npm run lint

    - name: Run type check
      run: npm run typecheck

    - name: Build application
      run: npm run build

    - name: Test dashboard build
      run: |
        echo "Testing if dashboard route builds correctly..."
        ls -la .next/server/app/dashboard/
        echo "‚úÖ Dashboard route built successfully"

  # Security Audit Job
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

  # Deploy to Vercel (Production)
  deploy-vercel:
    needs: [build-and-test, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy Project Artifacts
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # Success Notification
  success-notification:
    needs: [build-and-test, security-audit]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Success Message
      run: |
        echo "üéâ Dev Elite Academy CI/CD Pipeline Successful!"
        echo "‚úÖ Build: Passed"
        echo "‚úÖ Tests: Passed" 
        echo "‚úÖ Security: Passed"
        echo "üöÄ Ready for deployment!"