/**
 * „Çª„Ç≠„É•„Ç¢„Å™Áí∞Â¢ÉÂ§âÊï∞Ê§úË®º
 * Vercel„ÄåAll Environments„ÄçË®≠ÂÆö„Å´ÂØæÂøú„Åó„ÅüÂÆâÂÖ®Áâà
 */

export function validateEnvironmentVariables() {
  console.log('üîí Environment validation starting...');

  const requiredVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_KEY'
  ] as const;

  // 1. Âü∫Êú¨ÁöÑ„Å™Â≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
  const missing = requiredVars.filter(varName => !process.env[varName]);

  if (missing.length > 0) {
    console.error('‚ùå Missing required environment variables:', missing.join(', '));

    if (process.env.NODE_ENV === 'production') {
      throw new Error(`Missing critical environment variables: ${missing.join(', ')}`);
    } else {
      console.warn('‚ö†Ô∏è Development mode: continuing despite missing vars');
      return;
    }
  }

  // 2. ÂΩ¢ÂºèÊ§úË®ºÔºà„Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑ÂåñÔºâ
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;
  if (url && !url.startsWith('https://')) {
    console.error('‚ùå Supabase URL must use HTTPS');
    if (process.env.NODE_ENV === 'production') {
      throw new Error('Supabase URL must use HTTPS in production');
    }
  }

  // 3. „Ç≠„Éº„ÅÆÈï∑„ÅïÊ§úË®º
  const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  const serviceKey = process.env.SUPABASE_SERVICE_KEY;

  if (anonKey && anonKey.length < 20) {
    console.warn('‚ö†Ô∏è ANON_KEY seems too short');
  }

  if (serviceKey && serviceKey.length < 20) {
    console.warn('‚ö†Ô∏è SERVICE_KEY seems too short');
  }

  // 4. „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ
  if (process.env.NEXT_PUBLIC_SUPABASE_SERVICE_KEY) {
    console.error('üö® SECURITY WARNING: Service Key should not be public!');
    if (process.env.NODE_ENV === 'production') {
      throw new Error('Security violation: Service Key exposed as public');
    }
  }

  console.log('‚úÖ All environment variables validated successfully');
}