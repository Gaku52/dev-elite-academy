// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// ユーザープロフィール
model Profile {
  id                    String   @id @default(uuid())
  email                 String   @unique
  username              String?  @unique
  fullName              String?  @map("full_name")
  avatarUrl             String?  @map("avatar_url")
  skillLevel            SkillLevel @default(BEGINNER) @map("skill_level")
  targetCertifications  String[] @map("target_certifications")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // リレーション
  progress              UserProgress[]
  studyPlans            StudyPlan[]
  achievements          Achievement[]
  studySessions         StudySession[]
  learningPaths         LearningPath[]
  learningUnits         LearningUnit[]
  userLearningPaths     UserLearningPath[]

  @@map("profiles")
}

// 学習カテゴリー
model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  color       String?
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // リレーション
  contents    LearningContent[]
  studyPlans  StudyPlan[]
  learningPaths LearningPath[]

  @@map("categories")
}

// 学習コンテンツ
model LearningContent {
  id            Int         @id @default(autoincrement())
  categoryId    Int         @map("category_id")
  title         String
  description   String?
  contentType   ContentType @map("content_type")
  contentBody   Json        @map("content_body")
  difficulty    Difficulty
  estimatedTime Int         @map("estimated_time") // 分単位
  tags          String[]
  isPublished   Boolean     @default(false) @map("is_published")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // リレーション
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  progress      UserProgress[]
  studyPlans    StudyPlanContent[]

  @@map("learning_contents")
}

// ユーザー学習進捗
model UserProgress {
  id          Int              @id @default(autoincrement())
  userId      String           @map("user_id")
  contentId   Int              @map("content_id")
  status      ProgressStatus   @default(NOT_STARTED)
  score       Float?           // 0.0-100.0
  timeSpent   Int              @default(0) @map("time_spent") // 分単位
  attempts    Int              @default(0)
  completedAt DateTime?        @map("completed_at")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  // リレーション
  user        Profile          @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     LearningContent  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@map("user_progress")
}

// 学習計画
model StudyPlan {
  id            Int      @id @default(autoincrement())
  userId        String   @map("user_id")
  categoryId    Int      @map("category_id")
  title         String
  description   String?
  targetDate    DateTime @map("target_date")
  isCompleted   Boolean  @default(false) @map("is_completed")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // リレーション
  user          Profile            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category           @relation(fields: [categoryId], references: [id])
  contents      StudyPlanContent[]

  @@map("study_plans")
}

// 学習計画とコンテンツの中間テーブル
model StudyPlanContent {
  id           Int             @id @default(autoincrement())
  studyPlanId  Int             @map("study_plan_id")
  contentId    Int             @map("content_id")
  sortOrder    Int             @default(0) @map("sort_order")
  createdAt    DateTime        @default(now()) @map("created_at")

  // リレーション
  studyPlan    StudyPlan       @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)
  content      LearningContent @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([studyPlanId, contentId])
  @@map("study_plan_contents")
}

// 達成記録
model Achievement {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  type        String   // "completion", "streak", "score", etc.
  title       String
  description String?
  iconUrl     String?  @map("icon_url")
  earnedAt    DateTime @default(now()) @map("earned_at")

  // リレーション
  user        Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

// 学習セッション（時間追跡用）
model StudySession {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  duration    Int      // 分単位
  contentIds  Int[]    @map("content_ids") // 学習したコンテンツのID配列
  createdAt   DateTime @default(now()) @map("created_at")

  // リレーション
  user        Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_sessions")
}

// Enums
enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  ARTICLE
  VIDEO
  QUIZ
  EXERCISE
  FLASHCARD
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

// 学習パス（個人が作成・共有可能）
model LearningPath {
  id            String   @id @default(uuid())
  title         String
  description   String?
  categoryId    Int?     @map("category_id")
  createdBy     String   @map("created_by")
  isPublic      Boolean  @default(false) @map("is_public")
  isTemplate    Boolean  @default(false) @map("is_template")
  tags          String[]
  difficulty    Difficulty?
  estimatedDays Int?     @map("estimated_days")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // リレーション
  category      Category?         @relation(fields: [categoryId], references: [id])
  creator       Profile           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  units         LearningPathUnit[]
  userPaths     UserLearningPath[]

  @@index([createdBy])
  @@index([isPublic])
  @@map("learning_paths")
}

// 学習単元（再利用可能）
model LearningUnit {
  id            String   @id @default(uuid())
  title         String
  description   String?
  contentType   ContentType @map("content_type")
  contentBody   Json     @map("content_body")
  difficulty    Difficulty
  estimatedTime Int      @map("estimated_time") // 分単位
  tags          String[]
  contentHash   String?  @map("content_hash") // 重複チェック用
  createdBy     String   @map("created_by")
  isPublic      Boolean  @default(false) @map("is_public")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // リレーション
  creator       Profile           @relation(fields: [createdBy], references: [id])
  pathUnits     LearningPathUnit[]
  progress      UnitProgress[]

  @@unique([contentHash])
  @@index([createdBy])
  @@index([isPublic])
  @@map("learning_units")
}

// 学習パスと学習単元の中間テーブル
model LearningPathUnit {
  id            String       @id @default(uuid())
  pathId        String       @map("path_id")
  unitId        String       @map("unit_id")
  sortOrder     Int          @default(0) @map("sort_order")
  isRequired    Boolean      @default(true) @map("is_required")
  createdAt     DateTime     @default(now()) @map("created_at")

  // リレーション
  path          LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  unit          LearningUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@unique([pathId, unitId])
  @@map("learning_path_units")
}

// ユーザーと学習パスの関連
model UserLearningPath {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  pathId        String       @map("path_id")
  status        ProgressStatus @default(NOT_STARTED)
  startedAt     DateTime?    @map("started_at")
  completedAt   DateTime?    @map("completed_at")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  // リレーション
  user          Profile      @relation(fields: [userId], references: [id], onDelete: Cascade)
  path          LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  unitProgress  UnitProgress[]

  @@unique([userId, pathId])
  @@map("user_learning_paths")
}

// 学習単元の進捗
model UnitProgress {
  id            String           @id @default(uuid())
  userPathId    String           @map("user_path_id")
  unitId        String           @map("unit_id")
  status        ProgressStatus   @default(NOT_STARTED)
  score         Float?           // 0.0-100.0
  timeSpent     Int              @default(0) @map("time_spent") // 分単位
  attempts      Int              @default(0)
  completedAt   DateTime?        @map("completed_at")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // リレーション
  userPath      UserLearningPath @relation(fields: [userPathId], references: [id], onDelete: Cascade)
  unit          LearningUnit     @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@unique([userPathId, unitId])
  @@map("unit_progress")
}
