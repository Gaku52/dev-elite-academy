// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// ユーザープロフィール
model Profile {
  id                    String   @id @default(uuid())
  email                 String   @unique
  username              String?  @unique
  fullName              String?  @map("full_name")
  avatarUrl             String?  @map("avatar_url")
  skillLevel            SkillLevel @default(BEGINNER) @map("skill_level")
  targetCertifications  String[] @map("target_certifications")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // リレーション
  progress              UserProgress[]
  studyPlans            StudyPlan[]
  achievements          Achievement[]
  studySessions         StudySession[]

  @@map("profiles")
}

// 学習カテゴリー
model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  color       String?
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // リレーション
  contents    LearningContent[]
  studyPlans  StudyPlan[]

  @@map("categories")
}

// 学習コンテンツ
model LearningContent {
  id            Int         @id @default(autoincrement())
  categoryId    Int         @map("category_id")
  title         String
  description   String?
  contentType   ContentType @map("content_type")
  contentBody   Json        @map("content_body")
  difficulty    Difficulty
  estimatedTime Int         @map("estimated_time") // 分単位
  tags          String[]
  isPublished   Boolean     @default(false) @map("is_published")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // リレーション
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  progress      UserProgress[]
  studyPlans    StudyPlanContent[]

  @@map("learning_contents")
}

// ユーザー学習進捗
model UserProgress {
  id          Int              @id @default(autoincrement())
  userId      String           @map("user_id")
  contentId   Int              @map("content_id")
  status      ProgressStatus   @default(NOT_STARTED)
  score       Float?           // 0.0-100.0
  timeSpent   Int              @default(0) @map("time_spent") // 分単位
  attempts    Int              @default(0)
  completedAt DateTime?        @map("completed_at")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  // リレーション
  user        Profile          @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     LearningContent  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@map("user_progress")
}

// 学習計画
model StudyPlan {
  id            Int      @id @default(autoincrement())
  userId        String   @map("user_id")
  categoryId    Int      @map("category_id")
  title         String
  description   String?
  targetDate    DateTime @map("target_date")
  isCompleted   Boolean  @default(false) @map("is_completed")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // リレーション
  user          Profile            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category           @relation(fields: [categoryId], references: [id])
  contents      StudyPlanContent[]

  @@map("study_plans")
}

// 学習計画とコンテンツの中間テーブル
model StudyPlanContent {
  id           Int             @id @default(autoincrement())
  studyPlanId  Int             @map("study_plan_id")
  contentId    Int             @map("content_id")
  sortOrder    Int             @default(0) @map("sort_order")
  createdAt    DateTime        @default(now()) @map("created_at")

  // リレーション
  studyPlan    StudyPlan       @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)
  content      LearningContent @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([studyPlanId, contentId])
  @@map("study_plan_contents")
}

// 達成記録
model Achievement {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  type        String   // "completion", "streak", "score", etc.
  title       String
  description String?
  iconUrl     String?  @map("icon_url")
  earnedAt    DateTime @default(now()) @map("earned_at")

  // リレーション
  user        Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

// 学習セッション（時間追跡用）
model StudySession {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  duration    Int      // 分単位
  contentIds  Int[]    @map("content_ids") // 学習したコンテンツのID配列
  createdAt   DateTime @default(now()) @map("created_at")

  // リレーション
  user        Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_sessions")
}

// Enums
enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  ARTICLE
  VIDEO
  QUIZ
  EXERCISE
  FLASHCARD
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
